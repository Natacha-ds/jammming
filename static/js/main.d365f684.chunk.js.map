{"version":3,"sources":["util/Spotify.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/Playlist/Playlist.js","Components/SearchResults/SearchResults.js","Components/SearchBar/SearchBar.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","Track","props","addTrack","bind","removeTrack","renderAction","this","isRemoval","onClick","className","onAdd","track","onRemove","name","artist","album","React","Component","TrackList","tracks","map","key","id","Playlist","handleNameChange","event","onNameChange","target","value","defaultValue","onChange","playlistTrack","onSave","SearchResults","searchResults","SearchBar","state","term","search","handleTermChange","onSearch","setState","placeholder","redirectUri","window","location","href","Spotify","getAccessToken","accessTokenMatch","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","console","log","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","udpatePlaylistName","find","savedTrack","push","filter","currentTrack","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d365f684.chunk.js","sourcesContent":["let accessToken; // token = vérifier que j'ai les droits pour accèder à l'API\nconst clientID = '84c2743fa1894da9b784d92d5440b566';\nconst redirectUri = window.location.href;\nconst Spotify = {\n\tgetAccessToken() {\n\t\tif (accessToken) {\n\t\t\treturn accessToken;\n\t\t}\n\n\t\tconst accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n\t\tconst expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n\t\tif (accessTokenMatch && expiresInMatch) {\n\t\t\taccessToken = accessTokenMatch[1];\n\t\t\tlet expiresIn = Number(expiresInMatch[1]);\n\n\t\t\twindow.setTimeout(() => {\n\t\t\t\taccessToken = '';\n\t\t\t}, expiresIn * 1000);\n\t\t\twindow.history.pushState('Access Token', null, '/');\n\t\t\treturn accessToken;\n\t\t} else {\n\t\t\tconst accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n\t\t\twindow.location = accessUrl;\n\t\t}\n\t},\n\tsearch(term) {\n\t\tconst accessToken = Spotify.getAccessToken();\n\t\treturn fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n\t\t\theaders: { Authorization: `Bearer ${accessToken}` }\n\t\t})\n\t\t\t.then((response) => {\n\t\t\t\tconsole.log('response: ', response);\n\t\t\t\treturn response.json();\n\t\t\t})\n\t\t\t.then((jsonResponse) => {\n\t\t\t\tif (!jsonResponse.tracks) {\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\t\t\t\treturn jsonResponse.tracks.items.map((track) => ({\n\t\t\t\t\tid: track.id,\n\t\t\t\t\tname: track.name,\n\t\t\t\t\tartist: track.artists[0].name,\n\t\t\t\t\talbum: track.album.name,\n\t\t\t\t\turi: track.uri\n\t\t\t\t}));\n\t\t\t});\n\t},\n\tsavePlaylist(name, trackUris) {\n\t\tif (!name || !trackUris.length) {\n\t\t\treturn;\n\t\t}\n\t\tconst accessToken = Spotify.getAccessToken();\n\t\tconst headers = { Authorization: `Bearer ${accessToken}` };\n\t\tlet userId;\n\t\treturn fetch('https://api.spotify.com/v1/me', { headers })\n\t\t\t.then((response) => response.json())\n\t\t\t.then((jsonResponse) => {\n\t\t\t\tuserId = jsonResponse.id;\n\t\t\t\treturn fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\tbody: JSON.stringify({ name: name }),\n\t\t\t\t\theaders: headers\n\t\t\t\t})\n\t\t\t\t\t.then((response) => response.json())\n\t\t\t\t\t.then((jsonResponse) => {\n\t\t\t\t\t\tconst playlistId = jsonResponse.id;\n\t\t\t\t\t\treturn fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n\t\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\t\tbody: JSON.stringify({ uris: trackUris }),\n\t\t\t\t\t\t\theaders: headers\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t});\n\t}\n};\n\nexport default Spotify;\n","import React from 'react';\nimport './Track.css';\n\nexport class Track extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.addTrack = this.addTrack.bind(this);\n\t\tthis.removeTrack = this.removeTrack.bind(this);\n\t\tthis.renderAction = this.renderAction.bind(this);\n\t}\n\trenderAction() {\n\t\tif (this.props.isRemoval) {\n\t\t\treturn (\n\t\t\t\t<button onClick={this.removeTrack} className=\"Track-action\">\n\t\t\t\t\t-\n\t\t\t\t</button>\n\t\t\t);\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<button onClick={this.addTrack} className=\"Track-action\">\n\t\t\t\t\t+\n\t\t\t\t</button>\n\t\t\t);\n\t\t}\n\t}\n\taddTrack() {\n\t\tthis.props.onAdd(this.props.track);\n\t}\n\n\tremoveTrack() {\n\t\tthis.props.onRemove(this.props.track);\n\t}\n\n\trender() {\n\t\tconst { track } = this.props;\n\t\treturn (\n\t\t\t<div className=\"Track\">\n\t\t\t\t<div className=\"Track-information\">\n\t\t\t\t\t<h3>{track.name}</h3>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t{track.artist} | {track.album}\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t{this.renderAction()}\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport './TrackList.css';\nimport { Track } from '../Track/Track';\n\nexport class TrackList extends React.Component {\n\trender() {\n\t\tconst { onAdd, onRemove, isRemoval, tracks } = this.props;\n\t\treturn (\n\t\t\t<div className=\"TrackList\">\n\t\t\t\t{tracks.map((track) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Track track={track} key={track.id} onAdd={onAdd} onRemove={onRemove} isRemoval={isRemoval} />\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport './Playlist.css';\nimport { TrackList } from '../TrackList/TrackList';\n\nexport class Playlist extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.handleNameChange = this.handleNameChange.bind(this);\n\t}\n\thandleNameChange(event) {\n\t\tthis.props.onNameChange(event.target.value);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"Playlist\">\n\t\t\t\t<input defaultValue={'New Playlist'} onChange={this.handleNameChange} />\n\t\t\t\t<TrackList tracks={this.props.playlistTrack} onRemove={this.props.onRemove} isRemoval={true} />\n\t\t\t\t<button className=\"Playlist-save\" onClick={this.props.onSave}>\n\t\t\t\t\tSAVE TO SPOTIFY\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport './SearchResults.css';\nimport { TrackList } from '../TrackList/TrackList';\n\nexport class SearchResults extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"SearchResults\">\n\t\t\t\t<h2>Results</h2>\n\t\t\t\t<TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport './SearchBar.css';\n\nexport class SearchBar extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = { term: '' };\n\t\tthis.search = this.search.bind(this);\n\t\tthis.handleTermChange = this.handleTermChange.bind(this);\n\t}\n\tsearch() {\n\t\tthis.props.onSearch(this.state.term);\n\t}\n\thandleTermChange(event) {\n\t\tthis.setState({ term: event.target.value });\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"SearchBar\">\n\t\t\t\t<input onChange={this.handleTermChange} placeholder=\"Enter A Song, Album, or Artist\" />\n\t\t\t\t<button className=\"SearchButton\" onClick={this.search}>\n\t\t\t\t\tSEARCH\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport './App.css';\nimport { Playlist } from '../Playlist/Playlist.js';\nimport { SearchResults } from '../SearchResults/SearchResults.js';\nimport { SearchBar } from '../SearchBar/SearchBar.js';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tsearchResults: [],\n\t\t\tplaylistName: 'Bouge ton boule',\n\t\t\tplaylistTrack: []\n\t\t};\n\t\tthis.addTrack = this.addTrack.bind(this);\n\t\tthis.removeTrack = this.removeTrack.bind(this);\n\t\tthis.udpatePlaylistName = this.udpatePlaylistName.bind(this);\n\t\tthis.savePlaylist = this.savePlaylist.bind(this);\n\t\tthis.search = this.search.bind(this);\n\t}\n\taddTrack(track) {\n\t\tif (this.state.playlistTrack.find((savedTrack) => savedTrack.id === track.id)) {\n\t\t\treturn;\n\t\t}\n\t\tthis.state.playlistTrack.push(track);\n\t\tthis.setState({ playlistTrack: this.state.playlistTrack });\n\t}\n\n\tremoveTrack(track) {\n\t\tthis.setState(() => ({\n\t\t\tplaylistTrack: this.state.playlistTrack.filter((currentTrack) => currentTrack.id !== track.id)\n\t\t}));\n\t}\n\n\tudpatePlaylistName(name) {\n\t\tthis.setState({ playlistName: name });\n\t}\n\n\tsavePlaylist() {\n\t\tconst trackUris = this.state.playlistTrack.map((track) => track.uri);\n\t\tSpotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n\t\t\tthis.setState({ playlistName: 'New Playlist', playlistTrack: [] });\n\t\t});\n\t}\n\n\tsearch(term) {\n\t\tSpotify.search(term).then((searchResults) => {\n\t\t\tthis.setState({\n\t\t\t\tsearchResults: searchResults\n\t\t\t});\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>\n\t\t\t\t\tJa<span className=\"highlight\">mmm</span>ing\n\t\t\t\t</h1>\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<SearchBar onSearch={this.search} />\n\t\t\t\t\t<div className=\"App-playlist\">\n\t\t\t\t\t\t<SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack} />\n\t\t\t\t\t\t<Playlist\n\t\t\t\t\t\t\tplaylistName={this.state.playlistName}\n\t\t\t\t\t\t\tplaylistTrack={this.state.playlistTrack}\n\t\t\t\t\t\t\tonRemove={this.removeTrack}\n\t\t\t\t\t\t\tonNameChange={this.udpatePlaylistName}\n\t\t\t\t\t\t\tonSave={this.savePlaylist}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}